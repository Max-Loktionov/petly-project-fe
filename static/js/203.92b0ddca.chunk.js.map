{"version":3,"file":"static/js/203.92b0ddca.chunk.js","mappings":"mTAEaA,EAAkBC,EAAAA,GAAW,CACxCC,MAAOD,EAAAA,KAAaC,MAAM,0CAA0CC,WACpEC,SAAUH,EAAAA,KAAaE,a,UCOZE,EAAY,WAAO,IAAD,IAC7B,GAAmCC,EAAAA,EAAAA,MAAsB,eAAlDC,EAAS,KAAIC,EAAS,KAATA,UACZC,EAAaC,EAAAA,GAAAA,GACfC,GAAWC,EAAAA,EAAAA,MACjB,GAMIC,EAAAA,EAAAA,IAAQ,CAAEC,UAAUC,EAAAA,EAAAA,GAAYf,KALlCgB,EAAK,EAALA,MACAC,EAAQ,EAARA,SACAC,EAAQ,EAARA,SACAC,EAAY,EAAZA,aACaC,EAAM,EAAnBC,UAAaD,QAGfE,EAAAA,EAAAA,YAAU,WACRJ,EAAS,QACX,GAAG,CAACA,IAEJ,IAAMK,EAAQ,yCAAG,WAAMC,GAAI,qGAEFjB,EAAUiB,GAAM,KAAD,EAA9BC,EAAM,OACZd,EAASF,EAASgB,EAAOD,KAAKE,QAC9BC,QAAQC,IAAIH,EAAOD,KAAKE,OAAO,gDC7BXG,ED+BT,KAAMA,QC/BcC,EAAAA,GAAAA,MAAYD,GDgC3CF,QAAQC,IAAI,EAAD,IAAQ,QAErBZ,IAAQ,kCClCc,IAAAa,CDkCd,uBACT,gBAVa,sCAWd,OACE,UAAC,KAAI,CAACN,SAAUJ,EAAaI,GAAU,WACrC,SAAC,MAAK,QAACQ,KAAM,QAASC,YAAa,SAAaf,EAAS,YACzD,SAAC,IAAS,UAAc,QAAd,EAAEG,EAAOlB,aAAK,aAAZ,EAAc2B,WAC1B,SAAC,MAAK,QAACE,KAAM,WAAYC,YAAa,YAAgBf,EAAS,eAC/D,SAAC,IAAS,UAAiB,QAAjB,EAAEG,EAAOhB,gBAAQ,aAAf,EAAiByB,WAC7B,SAAC,KAAW,CAACE,KAAK,SAAQ,SAAEvB,EAAY,UAAY,WACpD,SAAC,KAAc,MAGrB,E,UE5BA,EAjBkB,WAChB,OACE,SAAC,KAAO,WACN,SAAC,KAAI,CAACyB,iBAAkB,IAAKC,kBAAmB,IAAI,UAClD,UAAC,KAAS,YACR,SAAC,KAAK,qBACN,SAAC7B,EAAS,KACV,UAAC,KAAI,qCAEH,SAAC,KAAQ,CAAC8B,KAAK,6BAA4B,mCAMvD,C","sources":["utilities/auth-validation-schemas.js","components/AuthForms/LoginForm.jsx","utilities/notification.js","pages/AuthPages/LoginPage.jsx"],"sourcesContent":["import * as yup from \"yup\";\n\nexport const loginFormSchima = yup.object({\n  email: yup.string().email(\"Email should be like: email@domain.com\").required(),\n  password: yup.string().required(),\n});\n","import { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useDispatch } from \"react-redux\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { ToastContainer } from \"react-toastify\";\nimport { loginError } from \"utilities/notification\";\nimport { useLoginUserMutation } from \"redux/auth/authApi\";\nimport { authSlice } from \"redux/auth\";\nimport { Form, Input, RegisterBtn, ErrorText } from \"./authForms.styled\";\nimport { loginFormSchima } from \"utilities/auth-validation-schemas\";\n\nexport const LoginForm = () => {\n  const [loginUser, { isLoading }] = useLoginUserMutation();\n  const { setToken } = authSlice;\n  const dispatch = useDispatch();\n  const {\n    reset,\n    register,\n    setFocus,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({ resolver: yupResolver(loginFormSchima) });\n\n  useEffect(() => {\n    setFocus(\"email\");\n  }, [setFocus]);\n\n  const onSubmit = async data => {\n    try {\n      const result = await loginUser(data);\n      dispatch(setToken(result.data.token));\n      console.log(result.data.token);\n    } catch (error) {\n      loginError(error.message);\n      console.log(error);\n    }\n    reset();\n  };\n  return (\n    <Form onSubmit={handleSubmit(onSubmit)}>\n      <Input type={\"email\"} placeholder={\"Email\"} {...register(\"email\")} />\n      <ErrorText>{errors.email?.message}</ErrorText>\n      <Input type={\"password\"} placeholder={\"Password\"} {...register(\"password\")} />\n      <ErrorText>{errors.password?.message}</ErrorText>\n      <RegisterBtn type=\"submit\">{isLoading ? \"Loading\" : \"Login\"}</RegisterBtn>\n      <ToastContainer />\n    </Form>\n  );\n};\n","import { toast } from \"react-toastify\";\n\nexport const loginError = message => toast.error(message);\n","import { LoginForm } from \"components/AuthForms\";\nimport { Section, Container, Title, Text, LogoLink, Wrap } from \"./authPages.styled\";\n\nconst LoginPage = () => {\n  return (\n    <Section>\n      <Wrap paddingTopTablet={276} paddingTopDesktop={148}>\n        <Container>\n          <Title>Login</Title>\n          <LoginForm />\n          <Text>\n            Don't have an account?\n            <LogoLink href=\"/petly-project-fe/register\">Registration</LogoLink>\n          </Text>\n        </Container>\n      </Wrap>\n    </Section>\n  );\n};\n\nexport default LoginPage;\n"],"names":["loginFormSchima","yup","email","required","password","LoginForm","useLoginUserMutation","loginUser","isLoading","setToken","authSlice","dispatch","useDispatch","useForm","resolver","yupResolver","reset","register","setFocus","handleSubmit","errors","formState","useEffect","onSubmit","data","result","token","console","log","message","toast","type","placeholder","paddingTopTablet","paddingTopDesktop","href"],"sourceRoot":""}