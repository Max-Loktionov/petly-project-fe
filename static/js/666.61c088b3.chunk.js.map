{"version":3,"file":"static/js/666.61c088b3.chunk.js","mappings":"6TAEaA,EAAkBC,EAAAA,GAAW,CACxCC,MAAOD,EAAAA,KAAaC,MAAM,0CAA0CC,WACpEC,SAAUH,EAAAA,KAAaE,aCJZE,EAAoB,SAAAC,GAC/B,OAAQA,EAAMC,QACZ,KAAK,IACH,OAAOD,EAAME,KAAKC,QACpB,KAAK,IACH,MAAO,0BACT,KAAK,IACH,MAAO,oCACT,IAAK,cACH,MAAO,uCACT,QACE,MAAO,gBAEb,E,8BCCaC,EAAY,WAAO,IAAD,IAC7B,GAAmCC,EAAAA,EAAAA,MAAsB,eAAlDC,EAAS,KAAIC,EAAS,KAATA,UACZC,EAAaC,EAAAA,GAAAA,GACrB,GAAgCC,EAAAA,EAAAA,WAAS,GAAM,eAAxCC,EAAQ,KAAEC,EAAW,KACtBC,GAAWC,EAAAA,EAAAA,MACjB,GAMIC,EAAAA,EAAAA,IAAQ,CAAEC,UAAUC,EAAAA,EAAAA,GAAYvB,KALlCwB,EAAK,EAALA,MACAC,EAAQ,EAARA,SACAC,EAAQ,EAARA,SACAC,EAAY,EAAZA,aACaC,EAAM,EAAnBC,UAAaD,QAGfE,EAAAA,EAAAA,YAAU,WACRJ,EAAS,QACX,GAAG,CAACA,IAEJ,IAAMK,EAAQ,yCAAG,WAAMvB,GAAI,uGAEFI,EAAUJ,GAAM,KAAD,EAAxB,KAANwB,EAAM,QACD1B,MAAM,CAAD,eACuC,MAA/C2B,EAAe5B,EAAkB2B,EAAO1B,OACxC,IAAI4B,MAAMD,GAAc,KAAD,EAE/Bd,EAASL,EAASkB,EAAOxB,KAAK2B,QAC9BX,IAAQ,mDAERY,EAAAA,EAAAA,GAAW,KAAM3B,SAAS,0DAE7B,gBAZa,sCAad,OACE,UAAC,KAAI,CAACsB,SAAUJ,EAAaI,GAAU,WACrC,SAAC,MAAK,QAACM,KAAM,QAASC,YAAa,SAAab,EAAS,YACzD,SAAC,IAAS,UAAc,QAAd,EAAEG,EAAO1B,aAAK,aAAZ,EAAcO,WAC1B,UAAC,KAAa,YACZ,SAAC,MAAK,QAAC4B,KAAMpB,EAAW,OAAS,WAAYqB,YAAa,YAAgBb,EAAS,eACnF,SAAC,KAAS,CACRc,KAAK,WACLC,YAAa,kBAAMtB,GAAY,EAAK,EACpCuB,aAAc,kBAAMvB,GAAY,EAAK,EACrCwB,UAAW,kBAAMxB,GAAY,EAAM,EACnCyB,WAAY,kBAAMzB,GAAY,EAAM,EAAC,UAErC,gBAAK0B,IAAK3B,EAAW4B,EAAAA,EAAOC,EAAAA,EAAQC,IAAI,sCAI5C,SAAC,IAAS,UAAiB,QAAjB,EAAEnB,EAAOxB,gBAAQ,aAAf,EAAiBK,WAC7B,SAAC,KAAW,CAAC4B,KAAK,SAAQ,SAAExB,EAAY,UAAY,WACpD,SAAC,KAAc,MAGrB,E,UC9CA,EAjBkB,WAChB,OACE,SAAC,KAAO,WACN,SAAC,KAAI,CAACmC,iBAAkB,IAAKC,kBAAmB,IAAI,UAClD,UAAC,KAAS,YACR,SAAC,KAAK,qBACN,SAACvC,EAAS,KACV,UAAC,KAAI,qCAEH,SAAC,KAAQ,CAACwC,KAAK,6BAA4B,mCAMvD,C","sources":["utilities/auth-validation-schemas.js","utilities/fetchErrorHendler.js","components/AuthForms/LoginForm.jsx","pages/AuthPages/LoginPage.jsx"],"sourcesContent":["import * as yup from \"yup\";\n\nexport const loginFormSchima = yup.object({\n  email: yup.string().email(\"Email should be like: email@domain.com\").required(),\n  password: yup.string().required(),\n});\n","export const fetchErrorHendler = error => {\n  switch (error.status) {\n    case 401:\n      return error.data.message;\n    case 400:\n      return \"Wrong email or password\";\n    case 500:\n      return \"Something wrong, please try later\";\n    case \"FETCH_ERROR\":\n      return \"Chek your connection to the internet\";\n    default:\n      return \"Unknown error\";\n  }\n};\n","import { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useDispatch } from \"react-redux\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { ToastContainer } from \"react-toastify\";\nimport { loginError } from \"utilities/notification\";\nimport { useLoginUserMutation } from \"redux/auth/authApi\";\nimport { authSlice } from \"redux/auth\";\nimport { Form, Input, RegisterBtn, ErrorText, ButtonWrapper, ButtonEye } from \"./authForms.styled\";\nimport { loginFormSchima } from \"utilities/auth-validation-schemas\";\nimport { fetchErrorHendler } from \"utilities/fetchErrorHendler\";\nimport hidden from \"img/eye-off.svg\";\nimport view from \"img/eye.svg\";\n\nexport const LoginForm = () => {\n  const [loginUser, { isLoading }] = useLoginUserMutation();\n  const { setToken } = authSlice;\n  const [showPass, setShowPass] = useState(false);\n  const dispatch = useDispatch();\n  const {\n    reset,\n    register,\n    setFocus,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({ resolver: yupResolver(loginFormSchima) });\n\n  useEffect(() => {\n    setFocus(\"email\");\n  }, [setFocus]);\n\n  const onSubmit = async data => {\n    try {\n      const result = await loginUser(data);\n      if (result.error) {\n        const errorMessage = fetchErrorHendler(result.error);\n        throw new Error(errorMessage);\n      }\n      dispatch(setToken(result.data.token));\n      reset();\n    } catch (error) {\n      loginError(error.message);\n    }\n  };\n  return (\n    <Form onSubmit={handleSubmit(onSubmit)}>\n      <Input type={\"email\"} placeholder={\"Email\"} {...register(\"email\")} />\n      <ErrorText>{errors.email?.message}</ErrorText>\n      <ButtonWrapper>\n        <Input type={showPass ? \"text\" : \"password\"} placeholder={\"Password\"} {...register(\"password\")} />\n        <ButtonEye\n          name=\"showPass\"\n          onMouseDown={() => setShowPass(true)}\n          onTouchStart={() => setShowPass(true)}\n          onMouseUp={() => setShowPass(false)}\n          onTouchEnd={() => setShowPass(false)}\n        >\n          <img src={showPass ? view : hidden} alt=\"button view/hidden password\" />\n        </ButtonEye>\n      </ButtonWrapper>\n\n      <ErrorText>{errors.password?.message}</ErrorText>\n      <RegisterBtn type=\"submit\">{isLoading ? \"Loading\" : \"Login\"}</RegisterBtn>\n      <ToastContainer />\n    </Form>\n  );\n};\n","import { LoginForm } from \"components/AuthForms\";\nimport { Section, Container, Title, Text, LogoLink, Wrap } from \"./authPages.styled\";\n\nconst LoginPage = () => {\n  return (\n    <Section>\n      <Wrap paddingTopTablet={276} paddingTopDesktop={148}>\n        <Container>\n          <Title>Login</Title>\n          <LoginForm />\n          <Text>\n            Don't have an account?\n            <LogoLink href=\"/petly-project-fe/register\">Registration</LogoLink>\n          </Text>\n        </Container>\n      </Wrap>\n    </Section>\n  );\n};\n\nexport default LoginPage;\n"],"names":["loginFormSchima","yup","email","required","password","fetchErrorHendler","error","status","data","message","LoginForm","useLoginUserMutation","loginUser","isLoading","setToken","authSlice","useState","showPass","setShowPass","dispatch","useDispatch","useForm","resolver","yupResolver","reset","register","setFocus","handleSubmit","errors","formState","useEffect","onSubmit","result","errorMessage","Error","token","loginError","type","placeholder","name","onMouseDown","onTouchStart","onMouseUp","onTouchEnd","src","view","hidden","alt","paddingTopTablet","paddingTopDesktop","href"],"sourceRoot":""}